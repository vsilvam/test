<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
// Copyright (c) Microsoft Corporation.  All rights reserved.

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\LQCE.Modelo\ModeloLQCE.edmx";

MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this); 

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile("Trx" + entity.Name + ".cs");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using App.Infrastructure.Runtime;
using LQCE.Modelo;
using LQCE.Repositorio;

namespace LQCE.Transaccion
{
	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class Trx<#=code.Escape(entity)#>
	{
<#
string keyName = "";
bool TieneNombre = false;
foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
{
	if (ef.IsKey(edmProperty))
	{ 
		keyName = code.Escape(edmProperty);
	}
	if (code.Escape(edmProperty) == "NOMBRE")
	{ 
		TieneNombre = true;
	}
}
#>
		/// <summary>
		/// Propiedad que contiene el error actual de la instancia de negocio.
		/// </summary>
		public string Error { get; private set; }

		/// <summary>
		/// Propiedad que indica si el metodo actual se ejecuto satisfactoriamente.
		/// </summary>
		public bool Success { get; private set; }

		public Trx<#=code.Escape(entity)#>()
		{
		     Init();
		}

		private void Init()
		{
		    Error = string.Empty;
		    Success = false;
		}

		public List<<#=code.Escape(entity)#>> GetAll()
        {
			Init();
            try
            {
                using (LQCEEntities context = new LQCEEntities())
                {
                    Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
					<# if(TieneNombre) { #>
                    return repositorio.GetAll().OrderBy(i => i.NOMBRE).ToList();
					<# } else { #>
					return repositorio.GetAll().OrderBy(i => i.<#=keyName#>).ToList();
					<# } #>
                }
            }
            catch (Exception ex)
           {
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                throw ex;
            }
        }

		public List<<#=code.Escape(entity)#>> GetAllWithReferences()
        {
			Init();
			try
            {
                using (LQCEEntities context = new LQCEEntities())
                {
                    Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
                    <# if(TieneNombre) { #>
                    return repositorio.GetAllWithReferences().OrderBy(i => i.NOMBRE).ToList();
					<# } else { #>
					return repositorio.GetAllWithReferences().OrderBy(i => i.<#=keyName#>).ToList();
					<# } #>
                }
            }
            catch (Exception ex)
           {
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                throw ex;
            }
        }

		public <#=code.Escape(entity)#> GetById(int <#=keyName#>)
        {
			Init();
			try
            {
                using (LQCEEntities context = new LQCEEntities())
                {
                    Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
                    return repositorio.GetById(<#=keyName#>);
                }
            }
            catch (Exception ex)
            {
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                throw ex;
            }
        }

		public <#=code.Escape(entity)#> GetByIdWithReferences(int <#=keyName#>)
        {
			Init();
			try
            {
                using (LQCEEntities context = new LQCEEntities())
                {
                    Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
                    return repositorio.GetByIdWithReferences(<#=keyName#>);
                }
            }
            catch (Exception ex)
            {
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                throw ex;
            }
        }
<#




// Parametros GetByFilter

bool primero = true;
bool TieneActivo = false;
string parametrosGetByFilter = "";
string parametrosGetByFilterAll = "";

//claves foraneas

foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity && n.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
{
		if(!primero)
		{
			parametrosGetByFilter += ", ";
			parametrosGetByFilterAll += ", ";
		}
		else
		{
			primero = false;
		}
	
		parametrosGetByFilter+= "int?" + " " + code.Escape(navProperty) + "Id = null"; 
		parametrosGetByFilterAll += code.Escape(navProperty) + "Id";
}

//propiedades no nulables

foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && !p.Nullable))
{
	if(code.Escape(edmProperty) == "ACTIVO")
	{
		TieneActivo = true;
	}
	if (!ef.IsKey(edmProperty)  && code.Escape(edmProperty) != "ACTIVO")
	{ 
		if(!primero)
		{
			parametrosGetByFilter+= ", ";
			parametrosGetByFilterAll += ", ";
		}
		else
		{
			primero = false;
		}

		if(code.Escape(edmProperty.TypeUsage) == "string")
		{
			parametrosGetByFilter+= code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty) + " = \"\"";
		}
        else if(code.Escape(edmProperty.TypeUsage) == "int")
		{
			parametrosGetByFilter+= "int? " + code.Escape(edmProperty)  + " = null"; 
		}
        else if(code.Escape(edmProperty.TypeUsage) == "bool") 
		{
			parametrosGetByFilter+= "bool? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "DateTime")
		{
			parametrosGetByFilter+= "DateTime? " + code.Escape(edmProperty) + " = null"; 
		}
		else
		{
			parametrosGetByFilter += code.Escape(edmProperty.TypeUsage) + "? " + code.Escape(edmProperty) + " = null";
		}
		
		parametrosGetByFilterAll += code.Escape(edmProperty);
	}
}
//propiedades nulables

foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Nullable))
{
	if (!ef.IsKey(edmProperty)  && code.Escape(edmProperty) != "ACTIVO")
	{ 
		if(!primero)
		{
			parametrosGetByFilter+= ", ";
			parametrosGetByFilterAll += ", ";
		}
		else
		{
			primero = false;
		}

		if(code.Escape(edmProperty.TypeUsage) == "string")
		{
			parametrosGetByFilter+= code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty) + " = \"\"";
		}
        else if(code.Escape(edmProperty.TypeUsage) == "Nullable<bool>")
		{
			parametrosGetByFilter+= "bool? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<int>")
		{
			parametrosGetByFilter+= "int? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<System.Guid>")
		{
			parametrosGetByFilter+= "Guid? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<System.DateTime>")
		{
			parametrosGetByFilter+= "DateTime? " + code.Escape(edmProperty) + " = null";
		}
		else
		{
			parametrosGetByFilter += code.Escape(edmProperty.TypeUsage) + "? " + code.Escape(edmProperty) + " = null";
		}
		
		parametrosGetByFilterAll += code.Escape(edmProperty);
	}
}


// Parametros Add

primero = true;
string parametrosAdd = "";

//claves foraneas
foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity && n.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
{
		if(!primero)
		{
			parametrosAdd += ", ";
		}
		else
		{
			primero = false;
		}
		parametrosAdd += "int" + " " + code.Escape(navProperty) + "Id";		
}

//propiedades no nulables

foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && !p.Nullable && code.Escape(p) != "ACTIVO"))
{
	if (!ef.IsKey(edmProperty))
	{ 
		if(!primero)
		{
			parametrosAdd += ", ";
		}
		else
		{
			primero = false;
		}

		if(code.Escape(edmProperty.TypeUsage) == "string")
		{
			parametrosAdd += code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty);// + " = \"\"";
		}
        else if(code.Escape(edmProperty.TypeUsage) == "int")
		{
			parametrosAdd += "int " + code.Escape(edmProperty) ; 
		}
        else if(code.Escape(edmProperty.TypeUsage) == "bool") 
		{
			parametrosAdd += "bool " + code.Escape(edmProperty);
		}
		else if(code.Escape(edmProperty.TypeUsage) == "DateTime")
		{
			parametrosAdd += "DateTime " + code.Escape(edmProperty);
		}
		else
		{
			parametrosAdd += code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty);// + " = null";
		}
	}
}
//propiedades nulables

foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Nullable))
{
	if (!ef.IsKey(edmProperty))
	{ 
		if(!primero)
		{
			parametrosAdd += ", ";
		}
		else
		{
			primero = false;
		}

		if(code.Escape(edmProperty.TypeUsage) == "string")
		{
			parametrosAdd += code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty) + " = \"\"";
		}
        else if(code.Escape(edmProperty.TypeUsage) == "Nullable<bool>")
		{
			parametrosAdd += "bool? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<int>")
		{
			parametrosAdd += "int? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<decimal>")
		{
			parametrosAdd+= "decimal? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<System.Guid>")
		{
			parametrosAdd += "Guid? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<System.DateTime>")
		{
			parametrosAdd += "DateTime? " + code.Escape(edmProperty) + " = null";
		}
		else
		{
			parametrosAdd += code.Escape(edmProperty.TypeUsage) + "? " + code.Escape(edmProperty) + " = null";
		}
	}
}


//parametros Update

primero = true;
string parametrosUpdate = "";


//claves foraneas
foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity && n.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
{
		if(!primero)
		{
			parametrosUpdate += ", ";
		}
		else
		{
			primero = false;
		}

		parametrosUpdate += "int" + " " + code.Escape(navProperty) + "Id";		
}

//propiedades no nulables

foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && !p.Nullable && code.Escape(p) != "ACTIVO"))
{
	if (!ef.IsKey(edmProperty))
	{ 
		if(!primero)
		{
			parametrosUpdate += ", ";
		}
		else
		{
			primero = false;
		}

		if(code.Escape(edmProperty.TypeUsage) == "string")
		{
			parametrosUpdate += code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty);// + " = \"\"";
		}
        else if(code.Escape(edmProperty.TypeUsage) == "int")
		{
			parametrosUpdate += "int " + code.Escape(edmProperty) ; 
		}
        else if(code.Escape(edmProperty.TypeUsage) == "bool") 
		{
			parametrosUpdate += "bool " + code.Escape(edmProperty);
		}
		else if(code.Escape(edmProperty.TypeUsage) == "DateTime")
		{
			parametrosUpdate += "DateTime " + code.Escape(edmProperty);
		}
		else
		{
			parametrosUpdate += code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty);// + " = null";
		}
	}
}
//propiedades nulables

foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Nullable))
{
	if (!ef.IsKey(edmProperty))
	{ 
		if(!primero)
		{
			parametrosUpdate += ", ";
		}
		else
		{
			primero = false;
		}

		if(code.Escape(edmProperty.TypeUsage) == "string")
		{
			parametrosUpdate += code.Escape(edmProperty.TypeUsage) + " " + code.Escape(edmProperty) + " = \"\"";
		}
        else if(code.Escape(edmProperty.TypeUsage) == "Nullable<bool>")
		{
			parametrosUpdate += "bool? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<decimal>")
		{
			parametrosUpdate+= "decimal? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<int>")
		{
			parametrosUpdate += "int? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<System.Guid>")
		{
			parametrosUpdate += "Guid? " + code.Escape(edmProperty) + " = null";
		}
		else if(code.Escape(edmProperty.TypeUsage) == "Nullable<System.DateTime>")
		{
			parametrosUpdate += "DateTime? " + code.Escape(edmProperty) + " = null";
		}
		else
		{
			parametrosUpdate += code.Escape(edmProperty.TypeUsage) + "? " + code.Escape(edmProperty) + " = null";
		}
	}
}



if(parametrosGetByFilterAll != "")
{
#>	 	
		public List<<#=code.Escape(entity)#>> GetByFilter(<#=parametrosGetByFilter#>)
        {
			Init();
			try
            {
                using (LQCEEntities context = new LQCEEntities())
                {
                    Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
                    return repositorio.GetByFilter(<#=parametrosGetByFilterAll#>).OrderBy(i => i.<#=keyName#>).ToList();
                }
            }
            catch (Exception ex)
            {
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                throw ex;
            }
        } 

		public List<<#=code.Escape(entity)#>> GetByFilterWithReferences(<#=parametrosGetByFilter#>)
        {
			Init();
            try
            {
                 using (LQCEEntities context = new LQCEEntities())
                {
                    Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
                    return repositorio.GetByFilterWithReferences(<#=parametrosGetByFilterAll#>).OrderBy(i => i.<#=keyName#>).ToList();
                }
            }
            catch (Exception ex)
            {
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                throw ex;
            }
        } 

		<#
		if(TieneActivo)
		{
#>
        public int Add(<#=parametrosAdd#>)
        {
		Init();
            try
            {
				 using (LQCEEntities context = new LQCEEntities())
				{
<#				    foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity && n.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
					{
#>
					Repositorio<#=code.Escape(navProperty.ToEndMember.GetEntityType())#> _repositorio<#=code.Escape(navProperty)#> = new Repositorio<#=code.Escape(navProperty.ToEndMember.GetEntityType())#>(context);
					<#=code.Escape(navProperty.ToEndMember.GetEntityType())#> _obj<#=code.Escape(navProperty)#> = _repositorio<#=code.Escape(navProperty)#>.GetById(<#=code.Escape(navProperty)#>Id);
					if(Equals(_obj<#=code.Escape(navProperty)#>,null))
					{
						throw new Exception(String.Concat("No se ha encontrado <#=code.Escape(navProperty)#> con Id =",<#=code.Escape(navProperty)#>Id.ToString()));
					}

<#
				}
#>
					<#=code.Escape(entity)#> _<#=code.Escape(entity)#> = new <#=code.Escape(entity)#>();

					//properties

<#
						foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && code.Escape(p) != "ACTIVO"))
                        {
                                if (!ef.IsKey(edmProperty))
                                { 
                                        if(code.Escape(edmProperty.TypeUsage) != "string")
                                        {
#>
                    _<#=code.Escape(entity)#>.<#=code.Escape(edmProperty)#> = <#=code.Escape(edmProperty)#>;
<#
                                        }
                                        else
                                        {
#>
                    _<#=code.Escape(entity)#>.<#=code.Escape(edmProperty)#> = <#=code.Escape(edmProperty)#>;				
<#
                                        }
                                }
                        }

#>
                    _<#=code.Escape(entity)#>.ACTIVO = true;				
<#

#>

					//parents
						 
<#                                      
                        foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity &&  n.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
                        {
                                //if(((AssociationType).RelationshipType).IsForeignKey)
                                //{
#>
                    _<#=code.Escape(entity)#>.<#=code.Escape(navProperty)#> = _obj<#=code.Escape(navProperty)#>;
<#                                      
                                //}
                        }
#>
                    
					context.AddObject("<#=code.Escape(entity)#>",_<#=code.Escape(entity)#>);
                    context.SaveChanges();

					return _<#=code.Escape(entity)#>.ID;
                }
            }
			catch(Exception ex)
			{
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                throw ex;
			}
        }

		public void Update(int Id, <#=parametrosUpdate#>)
		{
		Init();
			try
			{
				 using (LQCEEntities context = new LQCEEntities())
				{
                    Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
                    <#=code.Escape(entity)#> _<#=code.Escape(entity)#> = repositorio.GetById(Id);
                    if(Equals(_<#=code.Escape(entity)#>,null))
					{
						throw new Exception(String.Concat("No se ha encontrado <#=code.Escape(entity)#> con Id =",Id.ToString()));
					}
<#					foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity && n.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many  ))
					{
#>
					
					Repositorio<#=code.Escape(navProperty.ToEndMember.GetEntityType())#> _repositorio<#=code.Escape(navProperty)#> = new Repositorio<#=code.Escape(navProperty.ToEndMember.GetEntityType())#>(context);
					<#=code.Escape(navProperty.ToEndMember.GetEntityType())#> _obj<#=code.Escape(navProperty)#> = _repositorio<#=code.Escape(navProperty)#>.GetById(<#=code.Escape(navProperty)#>Id);
					if(Equals(_obj<#=code.Escape(navProperty)#>,null))
					{
						throw new Exception(String.Concat("No se ha encontrado <#=code.Escape(navProperty)#> con Id =",<#=code.Escape(navProperty)#>Id.ToString()));
					}
	<#
				} 
	#>

					//properties

<#
 			foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && code.Escape(p) != "ACTIVO"))
            {

			if (!ef.IsKey(edmProperty))
			{ 
				if(code.Escape(edmProperty.TypeUsage) == "string")
				{
#>
					if (!string.IsNullOrEmpty(<#=code.Escape(edmProperty)#>))
					{
						_<#=code.Escape(entity)#>.<#=code.Escape(edmProperty)#> = <#=code.Escape(edmProperty)#>;
					}
<#
				}
				else if(edmProperty.Nullable)
				{
#>
					if (<#=code.Escape(edmProperty)#>.HasValue)
					{
						_<#=code.Escape(entity)#>.<#=code.Escape(edmProperty)#> = <#=code.Escape(edmProperty)#>.Value;
					}
<#
				}
				else 
				{
#>
						_<#=code.Escape(entity)#>.<#=code.Escape(edmProperty)#> = <#=code.Escape(edmProperty)#>;
<#
				}
			}
		}
#>
	
					//parents
					 
<#                                      
                        foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity &&  n.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
                        {
                                //if(((AssociationType).RelationshipType).IsForeignKey)
                                //{
#>
                    _<#=code.Escape(entity)#>.<#=code.Escape(navProperty)#> = _obj<#=code.Escape(navProperty)#>;
<#                                      
                                //}
                        }
#>

					context.SaveChanges();
				}
			}
			catch(Exception ex)
			{
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                 throw ex;
			}
		}

		public void Delete (int Id)
		{
		Init();
			try
			{
				 using (LQCEEntities context = new LQCEEntities())
				{
					Repositorio<#=code.Escape(entity)#> repositorio = new Repositorio<#=code.Escape(entity)#>(context);
					<#=code.Escape(entity)#> _<#=code.Escape(entity)#> = repositorio.GetById(Id); 
					
					if(Equals(_<#=code.Escape(entity)#> ,null))
					{
						throw new Exception(String.Concat("No se ha encontrado <#=code.Escape(entity)#> con Id =",Id.ToString()));
					}

					_<#=code.Escape(entity)#>.ACTIVO = false;

					context.SaveChanges();
				}
			}
			catch(Exception ex)
			{
				 ISException.RegisterExcepcion(ex);
                Error = ex.Message;
                 throw ex;
			}
		}
<#
	}
}
#>
	}
}
<#

}	fileManager.Process();

#>